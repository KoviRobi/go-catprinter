package catprinter

import "fmt"

var (
	cmdGetDevState      = []byte{0x51, 0x78, 0xA3, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF}
	cmdSetQuality200Dpi = []byte{0x51, 0x78, 0xA4, 0x00, 0x01, 0x00, 0x32, 0x9E, 0xFF}
	cmdGetDevInfo       = []byte{0x51, 0x78, 0xA8, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF}
	cmdLatticeStart     = []byte{0x51, 0x78, 0xA6, 0x00, 0x0B, 0x00, 0xAA, 0x55, 0x17, 0x38, 0x44, 0x5F, 0x5F, 0x5F, 0x44, 0x38, 0x2C, 0xA1, 0xFF}
	cmdLatticeEnd       = []byte{0x51, 0x78, 0xA6, 0x00, 0x0B, 0x00, 0xAA, 0x55, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x11, 0xFF}
	cmdSetPaper         = []byte{0x51, 0x78, 0xA1, 0x00, 0x02, 0x00, 0x30, 0x00, 0xF9, 0xFF}
	cmdPrintImg         = []byte{0x51, 0x78, 0xBE, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF}
	cmdPrintText        = []byte{0x51, 0x78, 0xBE, 0x00, 0x01, 0x00, 0x01, 0x07, 0xFF}

	cmdStartPrinting = []byte{0x51, 0x78, 0xA3, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF}
	cmdApplyEnergy   = []byte{0x51, 0x78, 0xBE, 0x00, 0x01, 0x00, 0x01, 0x07, 0xFF}
	cmdUpdateDevice  = []byte{0x51, 0x78, 0xA9, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF}
	cmdSlow          = []byte{0x51, 0x78, 0xBD, 0x00, 0x01, 0x00, 0x24, 0xFC, 0xFF}
	cmdPower         = []byte{0x51, 0x78, 0xAF, 0x00, 0x02, 0x00, 0xFF, 0xDF, 0xC4, 0xFF}

	cmdFinalSpeed = []byte{0x51, 0x78, 0xBD, 0x00, 0x01, 0x00, 0x08, 0x38, 0xFF}

	checksumTable = []byte{
		0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D, 0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62,
		0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D, 0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA,
		0xCD, 0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD, 0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC,
		0xD5, 0xD2, 0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA, 0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93,
		0x94, 0x9D, 0x9A, 0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A, 0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42, 0x6F,
		0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A, 0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
		0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4, 0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B,
		0x7C, 0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44, 0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34, 0x4E, 0x49, 0x40, 0x47,
		0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63, 0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
		0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, 0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC,
		0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3,
	}
)

// checksum calculates the checksum for a given byte array.
func checksum(bArr []byte, i, i2 int) byte {
	var b2 byte
	for i3 := i; i3 < i+i2; i3++ {
		b2 = checksumTable[(b2^bArr[i3])&0xFF]
	}
	return b2
}

// commandRetractPaper creates a command to retract paper by a specified amount.
func commandRetractPaper(howMuch int) []byte {

	bArr := []byte{
		0x51,
		0x78,
		0xA0,
		0x00,
		0x01,
		0x00,
		byte(howMuch & 0xFF),
		0x00,
		0xFF,
	}

	bArr[7] = checksum(bArr, 6, 1)
	return bArr
}

// commandFeedPaper creates a command to feed paper by a specified amount.
func commandFeedPaper(howMuch int) []byte {

	bArr := []byte{
		0x51,
		0x78,
		0xA1,
		0x00,
		0x01,
		0x00,
		byte(howMuch & 0xFF),
		0x00,
		0xFF,
	}

	bArr[7] = checksum(bArr, 6, 1)
	return bArr
}

// cmdSetEnergy sets the energy level. Max to `0xFFFF` By default, it seems around `0x3000` (1 / 5)
func commandSetEnergy(val int) []byte {

	bArr := []byte{
		0x51,
		0x78,
		0xAF,
		0x00,
		0x02,
		0x00,
		byte((val >> 0x08) & 0xFF),
		byte(val & 0xFF),
		0x00,
		0xFF,
	}

	bArr[7] = checksum(bArr, 6, 2)
	fmt.Println(bArr)
	return bArr

}

// encodeRunLengthRepetition encodes repetitions in a run-length format.
func encodeRunLengthRepetition(n int, val byte) []byte {
	var res []byte
	for n > 0x7F {
		res = append(res, 0x7F|byte(val<<7))
		n -= 0x7F
	}
	if n > 0 {
		res = append(res, val<<7|byte(n))
	}
	return res
}

// runLengthEncode performs run-length encoding on an image row.
func runLengthEncode(imgRow []byte) []byte {
	var res []byte
	count := 0
	var lastVal byte = 0xFF
	for _, val := range imgRow {
		if val == lastVal {
			count++
		} else {
			res = append(res, encodeRunLengthRepetition(count, lastVal)...)
			count = 1
		}
		lastVal = val
	}
	if count > 0 {
		res = append(res, encodeRunLengthRepetition(count, lastVal)...)
	}
	return res
}

// byteEncode encodes an image row into a byte array.
func byteEncode(imgRow []byte) []byte {
	var res []byte
	for chunkStart := 0; chunkStart < len(imgRow); chunkStart += 8 {
		var byteVal byte = 0
		for bitIndex := 0; bitIndex < 8; bitIndex++ {
			if chunkStart+bitIndex < len(imgRow) && imgRow[chunkStart+bitIndex] != 0 {
				byteVal |= 1 << uint8(bitIndex)
			}
		}
		res = append(res, byteVal)
	}
	return res
}

// commandPrintRow builds a print row command based on the image data.
func commandPrintRow(imgRow []byte) []byte {

	// Try to use run-length compression on the image data.
	encodedImg := runLengthEncode(imgRow)

	// If the resulting compression takes more than PRINT_WIDTH // 8, it means
	// it's not worth it. So we fall back to a simpler, fixed-length encoding.
	if len(encodedImg) > printWidth/8 {
		encodedImg = byteEncode(imgRow)
		bArr := append([]byte{
			0x51,
			0x78,
			0xA2,
			0x00,
			byte(len(encodedImg) & 0xFF),
			0x00,
		}, encodedImg...)
		bArr = append(bArr, 0x00, 0xFF)
		bArr[len(bArr)-2] = checksum(bArr, 0x06, len(encodedImg))
		return bArr
	}

	// Build the run-length encoded image command.
	bArr := append([]byte{0x51, 0x78, 0xBF, 0x00, byte(len(encodedImg)), 0x00}, encodedImg...)
	bArr = append(bArr, 0x00, 0xFF)
	bArr[len(bArr)-2] = checksum(bArr, 6, len(encodedImg))
	return bArr
}

// commandsPrintImg builds the commands to print an image.
func commandsPrintImg(imgS []byte, feed int) []byte {

	img := chunkify(imgS, printWidth)
	var data []byte

	data = append(data, cmdGetDevState...)
	data = append(data, cmdStartPrinting...)
	data = append(data, cmdSetQuality200Dpi...)
	data = append(data, cmdSlow...)
	data = append(data, cmdPower...)
	data = append(data, cmdApplyEnergy...)
	data = append(data, cmdUpdateDevice...)

	data = append(data, cmdLatticeStart...)
	data = append(data, commandRetractPaper(feed)...)
	for _, row := range img {
		data = append(data, commandPrintRow(row)...)
	}
	data = append(data, cmdLatticeEnd...)
	data = append(data, cmdFinalSpeed...)
	data = append(data, commandFeedPaper(feed)...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdGetDevState...)
	return data

}

func weakCommandsPrintImg(imgS []byte, feed int) []byte {

	img := chunkify(imgS, printWidth)

	data := append(cmdGetDevState, cmdSetQuality200Dpi...)
	data = append(data, cmdLatticeStart...)
	data = append(data, commandRetractPaper(feed)...)
	for _, row := range img {
		data = append(data, commandPrintRow(row)...)
	}
	data = append(data, commandFeedPaper(feed)...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdSetPaper...)
	data = append(data, cmdLatticeEnd...)
	data = append(data, cmdGetDevState...)
	return data

}
